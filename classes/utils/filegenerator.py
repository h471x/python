import os
from sys import path

from os.path import abspath as abs, join as jn, dirname as dir

from classes.utils.filehandler import FileHandler as NewFile

class FileGenerator:
    def get_table_infos(self, create_query):
        table_infos = {}
        create_table_syntax = 'CREATE TABLE IF NOT EXISTS'
        inherits_syntax = 'INHERITS'
        queries = create_query.split(';')
        for query in queries:
            if create_table_syntax in query:
                table_name_start = query.find(create_table_syntax) + len(create_table_syntax)
                table_name_end = query.find('(')
                table_name = query[table_name_start:table_name_end].strip()
                attributes_section = query[table_name_end + 1:].strip()

                # Remove content within CHECK() constraints
                while 'CHECK' in attributes_section:
                    check_start = attributes_section.find('CHECK')
                    check_end = attributes_section.find(')', check_start) + 1
                    attributes_section = attributes_section[:check_start] + attributes_section[check_end:]

                attributes_list = attributes_section[:-1].split(',')
                attributes = [attr.split()[0].strip() for attr in attributes_list if "FOREIGN KEY" not in attr and "CONSTRAINT" not in attr]
                if inherits_syntax in query:
                    inherits_index = query.find(inherits_syntax)
                    parent_table_name_start = query.find('(', inherits_index) + 1
                    parent_table_name_end = query.find(')', inherits_index)
                    parent_table_name = query[parent_table_name_start:parent_table_name_end].strip()
                    parent_attributes = table_infos.get(parent_table_name, [])
                    # Prepend parent attributes to child attributes
                    attributes = parent_attributes + attributes
                table_infos[table_name] = attributes
        return table_infos

    def create_controller_file(self, create_query):
        table = self.get_table_infos(create_query)
        table_class = NewFile('app/controllers')

        for table_name, attributes in table.items():
            table_name_lower = table_name.lower()
            controller_file_name = f"{table_name_lower}.py"
            file_path = table_class.get_file_path(controller_file_name)

            # Check if the file exists and is blank (size is 0)
            if not os.path.exists(file_path) or (os.path.exists(file_path) and os.path.getsize(file_path) == 0):
                # Get the attributes
                table_attributes = {attr for attr in attributes}

                # Generate default data dictionary with multi-line formatting
                # Add 6 identations = 24 spaces after each line break
                default_data = ",\n".join([f"'{attr}': '{attr}'" for attr in attributes])
                default_data = default_data.replace('\n', '\n' + ' ' * 24)

                # Generate default newData
                default_new_data = ",\n".join([f"'{attr}': 'new_{attr}'" for attr in attributes])
                default_new_data = default_new_data.replace('\n', '\n' + ' ' * 24)

                table_controller_content = (
                    f"""# {table_name_lower} table controller file
                    # autogenerated by filegenerator.py

                    from sys import path
                    from os.path import abspath as abs, join as jn, dirname as dir
                    path.append(abs(jn(dir(__file__), '..', '..')))

                    from classes.database.dbcrud import CrudHandler as handle_crud

                    {table_name_lower} = handle_crud('{table_name}')

                    {table_name_lower}_data_template = {{
                        {default_data}
                    }}

                    {table_name_lower}_new_data_template = {{
                        {default_new_data}
                    }}

                    def {table_name_lower}_insert_template():
                        {table_name_lower}.insert({table_name_lower}_data_template)

                    def {table_name_lower}_insert({table_name_lower}_data):
                        {table_name_lower}.insert({table_name_lower}_data)

                    def {table_name_lower}_select_all():
                        return {table_name_lower}.select_all()

                    def {table_name_lower}_count():
                        return {table_name_lower}.count()

                    def {table_name_lower}_select({table_name_lower}_data):
                        return {table_name_lower}.select({table_name_lower}_data)

                    def {table_name_lower}_update({table_name_lower}_data, {table_name_lower}_new_data):
                        {table_name_lower}.update({table_name_lower}_data, {table_name_lower}_new_data)

                    def {table_name_lower}_delete({table_name_lower}_data):
                        {table_name_lower}.delete({table_name_lower}_data)

                    def {table_name_lower}_delete_all():
                        {table_name_lower}.delete_all()

                    if __name__ == '__main__':
                        print("insert template")
                        {table_name_lower}_insert_template()
                        print({table_name_lower}_select_all())
                        print(" ")

                        print("select {table_name_lower}_data")
                        print({table_name_lower}_select({table_name_lower}_data_template))
                        print(" ")

                        print("update {table_name_lower}_data")
                        {table_name_lower}_update(
                            {table_name_lower}_data_template,
                            {table_name_lower}_new_data_template
                        )
                        print({table_name_lower}_select_all())
                        print(" ")

                        print("insert {table_name_lower}_data")
                        {table_name_lower}_insert({table_name_lower}_data_template)
                        print({table_name_lower}_select_all())
                        print(" ")

                        print("Counting {table_name_lower}")
                        print(f"Number of {table_name_lower} : {{{table_name_lower}_count()}}")
                        print(" ")

                        print("delete {table_name_lower}_data")
                        {table_name_lower}_delete({table_name_lower}_data_template)
                        print({table_name_lower}_select_all())
                        print(" ")

                        print("delete all")
                        {table_name_lower}_delete_all()
                        print({table_name_lower}_select_all())
                    """
                )

                # Adjust indentation for subsequent lines
                # Remove 4 indentations = 4 x 4 spaces = 16 spaces
                identations = 5
                lines = table_controller_content.split('\n')
                adjusted_lines = [lines[0]] + [line[identations*4:] for line in lines[1:]]
                table_controller_content = '\n'.join(adjusted_lines)

                table_class.write_file(file_path, table_controller_content)

                # print(f"{tableName} {{ {', '.join(attributes)} }}")
                print(f"New Controller File : app/controllers/{controller_file_name}")
            else:
                # print(f"{class_file_name} already exists")
                pass

